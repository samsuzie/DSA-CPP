/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findMiddle(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(slow!=NULL && fast!=NULL && fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    ListNode* merge(ListNode* list1,ListNode* list2){
        if(list1==NULL){
            return list2;
        }
        if(list2==NULL){
            return list1;
        }
        ListNode* t1 = list1;
        ListNode* t2 = list2;
        ListNode* dummyNode = new ListNode(-1);
        ListNode* temp = dummyNode;
        while(t1!=NULL && t2!=NULL){
            if(t1->val <t2->val){
                temp->next = t1;
                temp = t1;
                t1= t1->next;
            }
            else{
                temp->next = t2;
                temp = t2;
                t2= t2->next;
            }
        }
        if(t1!=NULL){
            temp->next = t1;
        }
        else{
            temp->next = t2;
        }
        return dummyNode->next;
    }
    ListNode* sortList(ListNode* head) {
        // base case
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* middle = findMiddle(head);
        ListNode* lefthead = head;
        ListNode* righthead = middle->next;
        middle->next = NULL;
        lefthead = sortList(lefthead);
        righthead = sortList(righthead);
        return merge(lefthead,righthead);
    }
};
