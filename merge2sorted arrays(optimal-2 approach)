class Solution {
public:
    void swapGreater(vector<int>& nums1, int ind1, vector<int>& nums2, int ind2){
        if(nums1[ind1]>nums2[ind2]){
            swap(nums1[ind1],nums2[ind2]);
        }
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
    //    gap method 
    int len = (n+m);
    int gap = (len/2)+(len%2);
    while(gap>0){
        int left = 0;
        int right = left+gap;
        while(right<len){
            // when both left and right are in their respective array
            if(left<m && right>=n){
                swapGreater(nums1,left,nums2,right-m);
            }
            //both are in nums2
            else if(left>=n){
                swapGreater(nums2,left-m,nums2,right-m);
            }
            // both are in nums1
            else{
                swapGreater(nums1,left,nums1,right);
            }
            left++;
            right++;
        }
        if(gap==1)break;
        gap = (gap/2)+(gap%2);
      }
    }
};
