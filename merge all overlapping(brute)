class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        // sort it
        sort(intervals.begin(),intervals.end());
        vector<vector<int>>ans;
        for(int i =0;i<n;i++){
            int start = intervals[i][0];
            int end = intervals[i][1];
            // if it is lying in the interval
            if(!ans.empty() && end<=ans.back()[1]){
                continue;
            }
            // if it is not it is a part of new interval 
            for(int j=i+1;j<n;j++){
                if(intervals[j][0]<=end){
                    end = max(end,intervals[j][1]);
                }
                else{
                    break;
                }
            }
            ans.push_back({start,end});
        }
        return ans ;
    } 
}; 
