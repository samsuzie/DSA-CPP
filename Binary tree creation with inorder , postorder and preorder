#include<iostream>
#include<queue>
using namespace std;
class node{
public:
int data;
node*left = NULL;
node*right = NULL;
node(int d){
  this->data = d;
  this->left=NULL;
  this->right = NULL;
}
};
node* buildTree(node* root){
  cout<<"enter the data for node"<<endl;
  int data;
  cin>>data;
  root = new node(data);

  if(data == -1){
    return nullptr;
  }
  cout<<"enter the element for left side"<<data<<endl;
  root->left = buildTree(root->left);
  cout<<"enter the element for right side"<<data<<endl;
  root->right = buildTree(root->right);
  return root;
}
// level order traversal
void levelOrderTraversal(node*root){
  queue<node*>q;
  q.push(root);
  // separator
  q.push(NULL);
  while(!q.empty()){
    node*temp = q.front();
    
    q.pop();
    if(temp==NULL){
      // purana level complete traverse ho chuka hai
      cout<<endl;
      if(!q.empty()){
        // queue still has some nodes
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left!=NULL){
        q.push(temp->left);
      }
      if(temp->right!=NULL){
        q.push(temp->right);
      }
    }
  }
}
// inorder function
void inorder(node*root){
  // base case
  if(root==NULL){
    return;
  }
  inorder(root->left);
  cout<<root->data<<" ";
  inorder(root->right);
}

// preorder traversal
void preorder(node*root){
  if(root==NULL){
    return ;
  }
  cout<<root->data<<endl;
  preorder(root->left);
  preorder(root->right);
}

// postorder
void postorder(node*root){
  if(root==NULL){
    return ;
  }
  preorder(root->left);
  preorder(root->right);
  cout<<root->data<<endl;
}
void buildFromLevelOrder(node* &root){
  queue<node*>q;
  cout<<"enter data for root"<<endl;
  int data;
  cin>>data;
  root = new node(data);
  q.push(root);

  while(!q.empty()){
    node*temp = q.front();
    q.pop();

    cout<<"enter left node for:"<<temp->data<<endl;
    int leftData ;
    cin>>leftData;

    if(leftData!=-1){
      temp->left = new node(leftData);
      q.push(temp->left);
    }
    
    cout<<"enter right node for:"<<temp->data<<endl;
    int rightData ;
    cin>>rightData;

    if(rightData!=-1){
      temp->right = new node(rightData);
      q.push(temp->right);
    }
  }
}
int main(){
  node*root = NULL;
  // root = buildTree(root);
  // // level order traversal
  // levelOrderTraversal(root);
  // cout<<"inorder traversal is:";
  // inorder(root);
  buildFromLevelOrder(root);
  levelOrderTraversal(root);
  // 1 3 5 7 11 17 -1 -1 -1 -1 -1 -1
}
