class TrieNode{
public:
char data;
TrieNode* children[26];
bool isTerminal;

TrieNode(char ch){
  data = ch;
  for (int i = 0; i < 26; i++) {
    children[i] = NULL;
  }
  isTerminal = false;
}
} ;
class Trie {
public:
TrieNode *root;

Trie() { root = new TrieNode('\0'); }
void insertUtil(TrieNode *root, string word) {
  // base case
  if (word.length() == 0) {
    // set the terminal node
    root->isTerminal = true;
    return;
  }
  // find index
  // assumption , word will be in CAPS
  int index = word[0] - 'a';
  TrieNode *child;
  // present
  if (root->children[index] != NULL) {
    child = root->children[index];
  } else {
    // absent
    child = new TrieNode(word[0]);
    root->children[index] = child;
  }
  // recursive call
  // word ka aaage wala index call kar dia
  insertUtil(child, word.substr(1));
}

void insertWord(string word) { 
  insertUtil(root, word); 
  }
void printSuggestion(TrieNode *curr, vector<string>&temp, string prefix) {
  if (curr->isTerminal) {
    temp.push_back(prefix);
    // why did we removed return staement from here
    // we removed return statement because there is a possibility that there maybe another 
    // terminal node 
  }
  for (char ch = 'a'; ch <= 'z'; ch++) {
    TrieNode *next = curr->children[ch - 'a'];
    if (next != NULL) {
      prefix.push_back(ch);
      printSuggestion(next, temp, prefix);
      prefix.pop_back();
    }
  }
}
vector<vector<string>> getSuggestions(string str) {
  TrieNode *prev = root;
  vector<vector<string>> output;
  string prefix = "";
  for (int i = 0; i < str.length(); i++) {
    char lastch = str[i];
    prefix.push_back(lastch);

    // check for lastch
    TrieNode *curr = prev->children[lastch - 'a'];

    if (curr == NULL) {
      break;
    }
    // if found
      vector<string> temp;
      printSuggestion(curr, temp, prefix);
      output.push_back(temp);
      temp.clear();
      prev = curr;
  }
  return output;
}
};
vector<vector<string>> phoneDirectory(vector<string>&contactList, string &queryStr)
{
  //  creation of trie
    Trie* t = new Trie();
    // insert all contact into trie
    for(int i=0;i<contactList.size();i++){
      string str = contactList[i];
      t->insertWord(str);
    }
    // return ans
    return t->getSuggestions(queryStr);
}
