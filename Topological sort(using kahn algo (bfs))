#include <bits/stdc++.h> 
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    // create adjacency list
    unordered_map<int,list<int>>adj;
    for(int i=0;i<e;i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
    }
    // find all the indegree
    vector<int>indegree(v);
    for(auto i :adj){
        for(auto j :i.second){
            indegree[j]++;
        }
    }

    // 0 indegree walo ko push kar do
    queue<int>q;
    for(int i =0;i<v;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    // do bfs
    vector<int>ans;
    while(!q.empty()){
        int front = q.front();
        q.pop();

        // ans store
        ans.push_back(front);
        // neighbor indegree update 
        for(auto neighbor:adj[front]){
            indegree[neighbor]--;
            if(indegree[neighbor]==0){
                q.push(neighbor);
            }
        }
    }
    return ans;
}
