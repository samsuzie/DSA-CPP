#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;

    // constructor
    Node(int d){
        this->data = d;
        this->next = NULL;
    }
    // DEstructor
    ~Node(){
        int value = this->data;
        if(this->next!=NULL){
            delete next;
            next=NULL;
        }
        cout<<"memory is free for node with data"<<value<<endl;
    }

};
void insertNode(Node* &tail,int element,int d){
    // assuming that the element is present in list
    // list is empty
    if(tail==NULL){
        Node* newNode = new Node(d);
        tail = newNode;
        newNode->next = newNode;
    }
    else{
        // non empty list
        Node* curr = tail;
        while(curr->data!=element){
            curr = curr->next;
        }
        // element found
        Node* temp = new Node(d);
        temp->next = curr->next;
        curr->next = temp;
    }
}
void print(Node* &tail){
    Node* temp = tail;
    if(tail==NULL){
        cout<<"list is empty"<<endl;
        return ;
    }
   do{
       cout<<tail->data<<" ";
       tail = tail->next; 
   }while(tail != temp);
}

void deleteNode(Node*& tail , int value){
// empty list
if(tail== NULL){
    cout<<"list is empty ";
    return ;
}
else{
    // non - empty
    // assuming value is present in the LL
    Node* prev = tail;
    Node* curr= prev->next;

    while(curr->data!=value){
        prev = curr;
        curr = curr->next;
    }
    prev ->next = curr->next;
    // 1NOde LL
    if(curr==prev){
        tail=NULL;
    }
    //  >2 LL
    if(tail==curr){
        tail=prev;
    }
    curr->next = NULL;
    delete curr;
}
}
int main() {
    // Write C++ code here
    Node* tail = NULL;
    insertNode(tail,5,3);
    print(tail);
    deleteNode(tail,3);
    print(tail);
    // // cout<<tail->data<<endl;
    // insertNode(tail,3,4);
    // insertNode(tail,4,19);
    // print(tail);
    // // cout<<tail->data<<endl;
    // insertNode(tail,3,15);
    // print(tail);
    // deleteNode(tail,19);
    // print(tail);
    // cout<<tail->data<<endl;

    return 0;
}
