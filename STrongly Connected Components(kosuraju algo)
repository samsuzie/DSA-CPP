#include<unordered_map>
#include<stack>
#include<list>
void dfs(int node , unordered_map<int,bool>&visited,stack<int>&st,unordered_map<int,list<int>>&adj){
	visited[node] = true;
	for(auto nbr:adj[node]){
          if (!visited[nbr]) {
            dfs(nbr, visited, st, adj);
          }
        }
	st.push(node);
}
void revdfs(int node,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj){
	visited[node] = true;
	for(auto nbr:adj[node]){
		if(!visited[nbr]){
			revdfs(nbr,visited,adj);
		}
	}
}
int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	//topological sort
	unordered_map<int,list<int>>adj;
	for(int i =0;i<edges.size();i++){
		int u = edges[i][0];
		int v = edges[i][1];
		adj[u].push_back(v);
	} 
	// topo sort
	unordered_map<int,bool>visited;
	stack<int>st;
	for(int i =0;i<v;i++){
		if(!visited[i]){
			dfs(i,visited,st,adj);
		}
	}

	// create a transpose graph
	unordered_map<int,list<int>>transpose;
	for(int i=0;i<=v;i++){
		// kyunki visited wala array false ho gaya hogaa toh hum jab dobara dfs call kar 
		// rahe hai toh we have to make sure ki wo false ho sabke liye
		visited[i]=0;
		for(auto nbr:adj[i]){
			transpose[nbr].push_back(i);
		}
	}
	// dfs call above ordering
	int count = 0;
	while(!st.empty()){
		int top = st.top();
		st.pop();
		if(!visited[top]){
			count++;
			revdfs(top,visited,transpose);
		}
	}
	return count;
}
