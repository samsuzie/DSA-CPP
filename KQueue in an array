#include <bits/stdc++.h>
using namespace std;
class KQueue{
    public:
    int n ;
    int k;
    int*arr;
    int *front;
    int*rear;
    int*next;
    int freespot;
    
    public:
    KQueue(int n , int k){
        this->n=n;
        this->k=k;
        front = new int[k];
        rear = new int[k];
        for(int i =0;i<k;i++){
            front[i]=-1;
            rear[i]=-1;
        }
        arr = new int [n];
        next = new int [n];
        for(int i =0;i<n;i++){
            next[i]=i+1;
        }
        next[n-1]=-1;
        freespot = 0;
    }
    
    void enqueue(int data,int qn){
        // overflow condition
        if(freespot==-1){
            cout<<"overflow";
            return ;
        }
        // find index
        int index = freespot;
        // update freed
        freespot = next[index];
        // if first element
        if(front[qn-1]==-1){
            front[qn-1]=index;
        }
        else{
            next[rear[qn-1]]=index;
        }
        // update next
        next[index]=-1;
        rear[qn-1]=index;
        arr[index]= data;
    }
    
    int dequeue(int qn){
        if(front[qn-1]==-1){
            cout<<"underflow"<<endl;
            return -1;
        }
        // find index to pop
        int index = front[qn-1];
        // front ko aage badhao
        front[qn-1] = next[index];
        // freeslot ko manage karo
        next[index]= freespot;
        // update freespot
        freespot = index;
        return arr[index];
    }
    
    
};
int main() {
    KQueue q(10,3);
	q.enqueue(4,1);
	q.enqueue(5,1);
	q.enqueue(10,2);
	q.enqueue(2,1);
	cout<<q.dequeue(1)<<endl;
	cout<<q.dequeue(2)<<endl;

}
