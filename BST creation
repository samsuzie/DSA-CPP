#include<iostream>
#include<queue>
using namespace std;
class Node{
public:
int data ;
Node* left;
Node* right;

Node(int d){
  this->data = d;
  this->left = NULL;
  this->right = NULL;
}
};
void inorder(Node*root){
  // base case
  if(root==NULL){
    return;
  }
  inorder(root->left);
  cout<<root->data<<" ";
  inorder(root->right);
}
// preorder traversal
void preorder(Node*root){
  if(root==NULL){
    return ;
  }
  cout<<root->data<<endl;
  preorder(root->left);
  preorder(root->right);
}

// postorder
void postorder(Node*root){
  if(root==NULL){
    return ;
  }
  postorder(root->left);
  postorder(root->right);
  cout<<root->data<<endl;
}
void levelOrderTraversal(Node*root){
  queue<Node*>q;
  q.push(root);
  // separator
  q.push(NULL);
  while(!q.empty()){
    Node*temp = q.front();

    q.pop();
    if(temp==NULL){
      // purana level complete traverse ho chuka hai
      cout<<endl;
      if(!q.empty()){
        // queue still has some nodes
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left!=NULL){
        q.push(temp->left);
      }
      if(temp->right!=NULL){
        q.push(temp->right);
      }
    }
  }
}
Node* insertIntoBST(Node* root , int data){
  // base case
  if(root == NULL){
    cout << "Inserting " << data << " as the root\n";
    root = new Node(10);
    return root;
  }
  if(data >root->data){
    // right part m insert krna hai
    cout << "Inserting " << data << " to the right of " << root->data << "\n";
    root->right = insertIntoBST(root->right,data);
  }
  else{
    cout << "Inserting " << data << " to the left of " << root->data << "\n";
    root->left = insertIntoBST(root->left,data);
  }
  return root;
}
void takeInput(Node* &root){
  int data;
  cin>>data;
  while(data !=-1){
    insertIntoBST(root,data);
    cin>>data;
  }
}
int main(){

Node* root = NULL;
cout<<"enter data to create BSt"<<endl;
takeInput(root);
cout<<"printing the bst"<<endl;
levelOrderTraversal(root);
inorder(root);
preorder(root);
  
}
