class Solution {
public:
    int getmax(vector<int>&nums){
        int maxi = INT_MIN;
        for(int i =0;i<nums.size();i++){
            maxi = max(nums[i],maxi);
        }
        return maxi;
    }
    int getsum(vector<int>&nums){
        int sum =0;
        int n = nums.size();
        for(int i =0;i<n;i++){
            sum+=nums[i];
        }
        return sum;
    }
    int possible(vector<int>nums,int mid,int k){
        int kcount =1;
        int sum =0;
        int n = nums.size();
        for(int i =0;i<n;i++){
            if(sum+nums[i]<=mid){
                sum+=nums[i];
            }
            else{
                kcount ++;
                sum = nums[i];
            }
        }
       return kcount;
    }
    int splitArray(vector<int>& nums, int k) {
        int low = getmax(nums);
        int high = getsum(nums);
        while(low<=high){
            int mid = low+(high-low)/2;
            int value = possible(nums,mid,k);
                if (value<=k){
                    high = mid-1;
                }
            else{
                low = mid+1;
            }
        }
        return low ;
    }
};
