#include<unordered_map>
#include<queue>
#include<list>
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // adjacency list
  unordered_map<int,list<int>>adj;
  for(int i =0;i<edges.size();i++){
    // because yaha p jo nodes hai  vo 0 start ho rhi hai
    int u = edges[i].first-1;
    int v = edges[i].second-1;

    adj[u].push_back(v);
  }
  // make the indegree array
  vector<int>indegree(n);
  for(auto i:adj){
    for (auto j:i.second){
      indegree[j]++;
    }
  }
  queue<int>q;
  
  for(int i =0;i<n;i++){
    if(indegree[i]==0){
      q.push(i);
    }
  }
 int cnt = 0;
  while(!q.empty()){
    int front = q.front();
    q.pop();
    cnt++;
    for(auto neighbor:adj[front]){
      indegree[neighbor]--;
      if(indegree[neighbor]==0){
        q.push(neighbor);
      }
    }
  }
  // valid topological sort
  if(cnt == n){
    return false;
  }
  else{
    return true;
  }

}
