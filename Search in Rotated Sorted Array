class Solution {
public:
    int getpivot(vector<int>&nums){
        int n = nums.size();
        int low =0;
        int high = n-1;
        int mid = low+(high-low)/2;
        while(low<=high){
            if(nums[mid]>nums[0]){
                low = mid+1;
            }
            else{
                high = mid;
            }
            mid = low+(high-low)/2;
        }
        return low;
    }
    int binarysearch(vector<int>&nums,int start ,int end , int target){
        int s=start;
        int e = end;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(target == nums[mid]){
                return mid;
            }
            else if(target>nums[mid]){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int pivot = getpivot(nums);
        if(nums[pivot]<=target && target<=nums[n-1]){
            return binarysearch(nums,pivot,n-1,target);
        }
        else{
           return  binarysearch(nums,0,pivot-1,target);
        }
    }
};
