class Solution {
public:
    int getmaximum(vector<int>&nums){
        int n = nums.size();
        int maxi = INT_MIN;
        for(int i =0;i<n;i++){
            maxi = max(nums[i],maxi);
        }
        return maxi;
    }
    bool possible(vector<int>&nums,int mid,int threshold){
        int ans =0;
        int n = nums.size();
        for(int i =0;i<n;i++){
            ans += ceil(nums[i]/(double)mid);
        }
        if(ans <= threshold){
            return true;
        }
        else{
            return false;
        }
    }
    int smallestDivisor(vector<int>& nums, int threshold) {
        int low = 1;
        int high = getmaximum(nums);
        while(low<=high){
            int mid = low+(high-low)/2;
            if(possible(nums,mid,threshold)){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
};
