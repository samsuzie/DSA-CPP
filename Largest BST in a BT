class info{
    public:
    int maxi;
    int mini;
    bool isBst;
    int size;
};
info solve(TreeNode *root , int &ans){
    // base case
    if(root ==NULL){
        return {INT_MIN,INT_MAX,true,0};
    }
    // if(root ->left ==NULL && root->right == NULL){
    //     return {root->data,root->data,true,1};
    // }
    info left = solve(root->left,ans);
    info right = solve(root->right,ans);

    info currentNode;
    currentNode.size = left.size+right.size+1;
    currentNode.maxi = max(root->data,right.maxi);
    currentNode.mini = min(root->data, left.mini);

    if(left.isBst && right.isBst && (root->data>left.maxi && root->data<right.mini)){
        currentNode.isBst = true;
    }
    else{
         currentNode.isBst = false;
    }
    // answer update 
    if(currentNode.isBst){
        ans = max(ans,currentNode.size);
    }
    return currentNode;
}
int largestBST(TreeNode * root){
    int maxSize = 0;
    info temp = solve(root,maxSize);
    return maxSize;
}
