class Solution {
  private:
  void insertAtTail(Node *head,Node *tail , int data){
      Node *newNode = new Node(data);
      if(head==NULL){
          head = newNode;
          tail = newNode;
      }
      else{
          tail->next = newNode;
          tail = newNode;
      }
  }
  public:
    Node *copyList(Node *head) {
        // step1 : create  a clone list
        Node*cloneHead = NULL;
        Node *cloneTail = NULL;
        Node *temp = head;
        while(temp!=NULL){
            insertAtTail(cloneHead,cloneTail,temp->data);
            temp = temp->next;
        }
        // step 2 : cloneNode add in between original lsit
        Node *originalNode = head;
        Node *cloneNode = cloneHead;
        while(originalNode!=NULL && cloneNode!=NULL){
        Node *forward = originalNode->next;
        originalNode->next = cloneNode;
        originalNode = forward;
        
        forward = cloneNode->next;
        cloneNode->next = originalNode;
        cloneNode= forward;
        }
        // step3:random pointer copy
        temp = head;
        while(temp!=NULL){
            if(temp->next !=NULL){
            temp->next->random = temp->random 
            ? temp->random->next:temp->random;
            }
            temp = temp->next->next;
        }
        // step 4:revert changes done in step 2
        originalNode = head;
        cloneNode = cloneHead;
        while(originalNode!=NULL && cloneNode!=NULL){
        originalNode->next = cloneNode->next;
        originalNode = originalNode->next;
        
        if(originalNode!=NULL){
        cloneNode->next = originalNode->next;
        }
        cloneNode = cloneNode->next;
        }
        // step 5: revert ans
        return cloneHead;
    }
};
