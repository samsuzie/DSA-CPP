void inorder( TreeNode<int>*root,vector<int>&in){
    if(root == NULL){
        return ;
    }
    inorder(root->left,in);
    in.push_back(root->data);
    inorder(root->right,in);
}
TreeNode<int>* inorderToBst(int s , int e, vector<int>&inorderVal){
    // base case
    if(s>e){
        return NULL;
    }
    // find out mid
    int mid = (s+e)/2;
    TreeNode<int>*root = new TreeNode<int>(inorderVal[mid]);
    root->left = inorderToBst(s, mid-1,inorderVal);
    root->right = inorderToBst(mid+1,  e, inorderVal);
    return root;
}
TreeNode<int>* balancedBst(TreeNode<int>* root) {
    // Write your code here.
    vector<int>inorderVal;
    inorder(root,inorderVal);
    return inorderToBst(0, inorderVal.size()-1, inorderVal);
}
