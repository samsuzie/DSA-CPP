class Solution {
  public:
    int upperbound(vector<int> &mat,int x , int n , int m){
        int low =0;
        int high = m-1;
        while(low<=high){
            int mid = low+(high-low);
            if(mat[mid]>x){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
    int blackbox(vector<vector<int>> &mat,int mid,int n,int m){
        int cnt =0;
        for(int i=0;i<n;i++){
            cnt += upperbound(mat[i],mid,n,m);
        }
        return cnt ;
    }
    int median(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        int low = INT_MAX;
        int high = INT_MIN;
        for(int i =0;i<n;i++){
            low = min(low,mat[i][0]);
            high = max(high,mat[i][m-1]);
        }
        int req = n*m/2;
        while(low<=high){
            int mid = low+(high-low)/2;
            int smallerEqual = blackbox(mat,mid,n,m);
            if(smallerEqual<=req){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return low;
    }
};
