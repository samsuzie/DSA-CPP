#include<iostream>
#include<unordered_map>
#include<vector>
#include<list>
using namespace std;
void dfs(int node,int parent,vector<int>&disc,vector<int>&low,unordered_map<int,bool>&visited,vector<int>&ap,int timer, unordered_map<int,list<int>>&adj){
  visited[node] = true;
  disc[node] = low[node] = timer++;
  int child = 0;
  for(auto nbr:adj[node]){
    // parent hai 
    if(nbr==parent){
      continue;
    }
    if(!visited[nbr]){
      dfs(nbr,node,disc,low,visited,ap,timer,ad);
      low[node] = min(low[node],low[nbr]);
      // check for ap point
      if(low[nbr]>=disc[node] && parent! = -1){
        ap[node] = true;
      }
      child ++;
    }
    else{
      // visited bhi hai aur parent bhi nahi hai
      low[node] = min(low[node],disc[nbr]);
    }
  }
  if(parent == -1 && child>1){
    ap[node]=true;
  }
}
int main(){
  // edges ki ek list padi hui hai
  vector<pair<int,int>>edges;
  edges.push_back(make_pair(0,3));
  edges.push_back(make_pair(3,4));
  edges.push_back(make_pair(0,4));
  edges.push_back(make_pair(0,1));
  edges.push_back(make_pair(1,2));
  int n = 0;
  int e = 5;
  
  // adj list
  unordered_map<int,list<int>>adj;
  for(int i =0;i<edges.size();i++){
    int u = edges[i].first;
    int v = edges[i].second;
    adj[u].push_back(v);
    adj[v].push_back(u); 
  }
  int timer = 0;
  vector<int>disc(n);
  vector<int>low(n);
  int parent = -1;
  unordered_map<int,bool>visited;
  vector<int>ap(n,0);
  for(int i =0;i<n;i++){
    disc[i] =-1;
    low[i] = -1;
  }
  for(int i =0;i<n;i++){
    if(!visited[i]){
      dfs(i,parent,disc,low,visited,ap,timer,adj);
    }
  }
  // print ap point
  cout<<"articulation point are as follows";
  for(int i =0;i<n;i++){
    if(ap[i]!=0){
      cout<<i<<" ";
    }
    cout<<endl;
  }
}
