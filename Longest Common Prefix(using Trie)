class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;
    int childCount;

    TrieNode(char ch){
        data = ch;
        for(int i =0;i<26;i++){
           children[i] = NULL; 
        }
        childCount = 0;
        isTerminal = false;
    }
};

class Trie{
    public:
    TrieNode* root;
    Trie(char ch){
        root = new TrieNode(ch);
    }
    void insertUtil(TrieNode*root,string word){
        // base case
        if(word.length()==0){
            root->isTerminal= true;
            return;
        }
        int index = word[0]-'a';
        TrieNode*child;
        // present
        if(root->children[index]!=NULL){
            child = root->children[index];
        }
        else{
            child = new TrieNode(word[0]);
            // if we are inserting a new node make sure we have increased the child count
            root->childCount++;
            root->children[index]= child;
        }
        return insertUtil(child, word.substr(1));

    }
     void insert(string word) {
       return  insertUtil(root,word);
    }

    void lcp(string str, string &ans){
        for(int i =0;i<str.length();i++){
            char ch = str[i];
        
        if(root->childCount == 1){
            ans.push_back(ch);
            // aage badh jaao
            int index = ch - 'a';
            root = root->children[index];
        }
        else{
            break;
        }
        // terminal character
        if (root->isTerminal) {
            break;
        }
        }
    }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    Trie *t = new Trie('\0');
    // insert all string into Trie
    for(int i =0;i<n;i++){
        t->insert(arr[i]);
    }
    string first = arr[0];
    string ans = "";
    t->lcp(first,ans);
    return  ans;

}


