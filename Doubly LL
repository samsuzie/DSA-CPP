#include <iostream>
using namespace std;
class Node{
   public:
   int data;
   Node* prev;
   Node* next; 
//    constructor
    Node(int d){
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
    ~Node(){
        int val = this->data;
        if(next!=NULL){
            delete next;
            next = NULL;
        }
        cout<<"memory free for node with  data"<<val<<endl;
    }
};
// traversing a Linked list
void print(Node*&head){
    Node* temp = head;
    while(temp!=NULL){
        cout<<temp->data <<" ";
        temp = temp->next;
    }
    cout<<endl;
}
// gives length of linked list
int getLength(Node* &head){
    Node* temp = head;
    int len = 0;
    while(temp!=NULL){
        len++;
        temp = temp->next;
    }
    return len;
}
// insert At head
void insertAtHead(Node* &head,Node*&tail , int data){
//  empty list
 if(head==NULL){
     Node*temp = new Node(data);
     head = temp;
 }
 else{
//   create a new Node
Node* temp = new Node(data);

temp->next = head;
head->prev = temp;
head = temp;
 }
}

// insertAt tail
void insertAtTail(Node* &head,Node* &tail,int data){

if(head==NULL){
    Node*temp = new Node(data);
    tail = temp;
    head = temp;
}
// create node
else{
Node* temp = new Node(data);
 tail->next = temp;
 temp->prev = tail;
 tail = temp;
}
}
// insert at position
void insertAtPosition(Node* &tail,Node* &head,int position , int d){
    if(position==1){
       insertAtHead(head,tail,d);
       return;
   }
   Node*temp = head;
   int cnt = 1 ;
   while(cnt<position-1){
       temp = temp->next;
       cnt++;
   } 
//    inserting at last posititon
   if(temp->next == NULL){
       insertAtTail(head,tail,d);
       return ;
   }
// inserting a middle position
//    creating a node for d
Node* nodeToInsert = new Node(d);
nodeToInsert->next = temp->next;
temp->next->prev = nodeToInsert;
temp->next = nodeToInsert;
nodeToInsert->prev = temp;

}

// deletion
void deleteNode(int position,Node* &head,Node* &tail){
    // deleting start node
    if(position==1){
        Node* temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;

    }
    if(tail->next==NULL){
        Node*temp = tail;
        temp->prev->next = NULL;
        tail = temp->prev;
        temp->prev = NULL;
        delete temp;
    }
    else{
        // deleting any middle node/last node
        Node*curr = head;
        Node*prev = NULL;
        int cnt = 1;
        while(cnt< position){
            prev = curr;
            curr=curr->next;
            cnt++;
        }
        
        curr->prev = NULL;
        prev->next = curr->next;
        curr->next = NULL;
       
        delete curr;
    }
}



int main() {
    Node* node1 = new Node(10);
    Node*head = node1;
    Node*tail = node1;
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    cout<<getLength(head)<<" ";
    insertAtHead(head,tail,11);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtHead(head,tail,8);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtHead(head,tail,9);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtTail(head,tail,25);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtPosition(tail,head,2,100);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtPosition(tail,head,1,101);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    insertAtPosition(tail,head,7,102);
    print(head);

    deleteNode(7,head,tail);
    print(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;




    return 0;
}
