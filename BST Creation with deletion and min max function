#include<iostream>
#include<queue>
using namespace std;
class Node{
public:
int data ;
Node* left;
Node* right;

Node(int d){
  this->data = d;
  this->left = NULL;
  this->right = NULL;
}
};
void inorder(Node*root){
  // base case
  if(root==NULL){
    return;
  }
  inorder(root->left);
  cout<<root->data<<" ";
  inorder(root->right);
}
// preorder traversal
void preorder(Node*root){
  if(root==NULL){
    return ;
  }
  cout<<root->data<<endl;
  preorder(root->left);
  preorder(root->right);
}

// postorder
void postorder(Node*root){
  if(root==NULL){
    return ;
  }
  postorder(root->left);
  postorder(root->right);
  cout<<root->data<<endl;
}
void levelOrderTraversal(Node*root){
  queue<Node*>q;
  q.push(root);
  // separator
  q.push(NULL);
  while(!q.empty()){
    Node*temp = q.front();

    q.pop();
    if(temp==NULL){
      // purana level complete traverse ho chuka hai
      cout<<endl;
      if(!q.empty()){
        // queue still has some nodes
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left!=NULL){
        q.push(temp->left);
      }
      if(temp->right!=NULL){
        q.push(temp->right);
      }
    }
  }
}
Node* insertIntoBST(Node* root , int data){
  // base case
  if(root == NULL){
    cout << "Inserting " << data << " as the root\n";
    root = new Node(10);
    return root;
  }
  if(data >root->data){
    // right part m insert krna hai
    cout << "Inserting " << data << " to the right of " << root->data << "\n";
    root->right = insertIntoBST(root->right,data);
  }
  else{
    cout << "Inserting " << data << " to the left of " << root->data << "\n";
    root->left = insertIntoBST(root->left,data);
  }
  return root;
}
Node* minvalue(Node* root){
    Node* temp = root;
    while(temp->left !=NULL){
        temp = temp->left;
    }
    return temp;
}
Node* maxVal(Node* root){
  Node* temp = root;
    while(temp->right !=NULL){
        temp = temp->left;
    }
    return right;
}
Node* deleteFromBST(Node* root,int value){
//    base case
if(root == NULL){
    return root;
}
// if(root->data == value){
    // 0 child
    if(root->left==NULL && root->right==NULL){
        delete root;
        return NULL;
    }
    // 1 child
    // left child
    if(root->left!=NULL && root->right == NULL){
        Node* temp = root->left;
        delete root;
        return temp;
    }
    // right child
    if(root->right!=NULL && root->left == NULL){
        Node* temp = root->right;
        delete root;
        return temp;
    }
    // 2 child
    if(root->left!=NULL && root->right!=NULL){
        // inorder sucessor
        int mini = minval(root->right)->data;
        root->data = mini;
        root->right = deleteFromBST(root->right , mini);
        return root;
    }
}
else if(root->data>value){
   root->left =  deleteFromBST(root->left , value);
   return root;
}
else{
    root ->right = deleteFromBST(root->right , value);
    return root;
}

}
void takeInput(Node* &root){
  int data;
  cin>>data;
  while(data !=-1){
    insertIntoBST(root,data);
    cin>>data;
  }
}
int main(){

Node* root = NULL;
cout<<"enter data to create BSt"<<endl;
takeInput(root);
cout<<"printing the bst"<<endl;
levelOrderTraversal(root);
inorder(root);
preorder(root);
cout<<"min value is "<<minvalue(root)->data<<endl;
cout<<"max value is"<<maxVal(root)->data<<endl;
root = deleteFromBST(root,30);
}
