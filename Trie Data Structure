#include<iostream>
using namespace std;
class TrieNode{
public:
char data;
TrieNode* children[26];
bool isTerminal;

TrieNode(char ch){
  data = ch;
  for(int i =0;i<26;i++){
    children[i] = NULL;
  }
  isTerminal = false;
}
};
class Trie{
  public:
  TrieNode* root ;

  Trie(){
    root = new TrieNode('\0');
  }

  void insertUtil(TrieNode* root , string word){
    // base case
    if(word.length()==0){
      // set the terminal node
      root->isTerminal = true;
      return ;
    }
    // find index
    // assumption , word will be in CAPS
    int index = word[0]-'A';
    TrieNode*child;
    // present
    if(root->children[index]!=NULL){
      child = root->children[index];
    }
    else{
      // absent
      child = new TrieNode(word[0]);
      root->children[index] = child;
    }
    // recursive call
    // word ka aaage wala index call kar dia
    insertUtil(child, word.substr(1));
  }

  void insertWord(string word){
    insertUtil(root,  word);
  }
 bool searchUtil(TrieNode* root , string word){
   // base case
   if(word.length()==0){
     return root->isTerminal;
   }
   int index = word[0]-'A';
   TrieNode* child;
   if(root->children[index]!=NULL){
     child = root->children[index];
   }
   else{
     return false;
   }
   return searchUtil(child, word.substr(1));
 }
  bool searchWord(string word){
    return searchUtil(root, word);
  }
void deleteUtil(TrieNode* root,string word){
  if(word.length()==0){
    root->isTerminal = false;
    cout<<"word is removed"<<endl;
    return ;
  }
  int index = word[0]-'A';
  TrieNode* child;
  // if present()
  if(root->children[index]!=NULL){
    child = root->children[index];
  }
  else{
    return ;
  }
  deleteUtil(child, word.substr(1));
}
 void deleteWord(string word){
   if(searchWord(word)==false){
     cout<<"already absent";
   }
   else{
     deleteUtil(root,word);
   }
 }
};
int main(){
  
  Trie *t = new Trie();
  t->insertWord("abcd");
  cout<<"present or not"<<t->searchWord("abcw")<<endl;
  t->insertWord("ARM");
  t->insertWord("DO");
  t->insertWord("TIME");
  t->insertWord("abcd");
  cout<<"present or not"<<t->searchWord("TIM")<<endl; 
  t->deleteWord("TIME");
  
}
