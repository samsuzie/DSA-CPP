#include<algorithm>
bool cmp(vector<int>&a , vector<int>&b){
    return a[2]<b[2];
}

void makeSet(vector<int>&parent,vector<int>&rank,int n){
for(int i =0;i<n;i++){
    // kyunki starting mein har ek ka parent apne aap k hi equal hai
    parent[i] = i;
    rank[i] = 0;
}
}
int findParent(vector<int>&parent,int node){
    if(parent[node] == node){
        return node;
    }
    // recursive call
    // yaha humne wo path compression wali situation handle kar li
    return parent[node]=  findParent(parent, parent[node]);
}
void unionSet(int u, int v , vector<int>&parent,vector<int>&rank){
    // find parent
    u = findParent(parent, u);
    v = findParent(parent, v);

    if(rank[u]<rank[v]){
        parent[u] = v;
    }
    else if(rank[v]<rank[u]){
        parent[v] = u;
    }
    else{
        parent[v] = u;
        rank[u]++;
    }
}
int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
//   hum sabse pehle apne edges wale vector ko sort karenge
//   cmp humara khud ka comparator hai jiski wajah se humari edges weight k hisaab se sort ho ajayengi
  sort(edges.begin(),edges.end(),cmp);
  vector<int>parent(n);
  vector<int>rank(n);
  makeSet(parent,rank,n);
  int minweight = 0;
  for(int i =0;i<edges.size();i++){
      int u = findParent(parent, edges[i][0]);
      int v = findParent(parent, edges[i][1]);
      int weight = edges[i][2];

      if(u != v){
          minweight += weight;
          unionSet(u, v, parent,rank);
      }
  }
  return minweight;
}
