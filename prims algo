#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // g is edge list
    // create adjacency list
     unordered_map<int,list<pair<int,int>>>adj;
     for(int i =0;i<g.size();i++){
         int u = g[i].first.first;
         int v = g[i].first.second;
         int w = g[i].second;

        //v imp - in questions m yeh humesha ek baar check kar lena ki test cases , aapki node konse number se shuru ho rahi hai 
        // jaise abhi toh 1 se shuru ho rahi hai agar 0 se shuru hoti toh hum -1 laga dete;
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
     }
     vector<int>key(n+1);
    //  n+1 isliye because har index har node ko represent kar raha hai
    vector<bool>mst(n+1);
    vector<int>parent(n+1);
    for(int i =0;i<=n;i++){
        key[i]=INT_MAX;
        parent[i] = -1;
        mst[i] = false;
    }
    // lets start algo
    // mark the key value of src node as 0 since here the sorce node is 1 we will mark its key value as 0
    key[1] = 0;
    parent[1] = -1;
    for(int i =1;i<n;i++){
        int mini = INT_MAX;
        int u ;
        find the minimum wali node
        for(int v = 1;v<=n;v++){
            if(mst[v]==false && key[v]<mini){
                u=v;
                mini = key[v];
            }
        }
        // yaha toh optimised our code we can use minheap to find minimum which will give minimum in o(1)
        
        // mark min node as true;
        mst[u] = true;
        // check its adjacent node
        for(auto it:adj[u]){
            int v = it.first;
            int w = it.second;
            if(mst[v]==false && w<key[v]){
                parent[v] = u;
                key[v] = w;
            }
        }
    }
    vector<pair<pair<int, int>, int>>result;
    // 2 se chalaya hai humne yaha p becuse 0 wali mapping hi nahi hai yeh aur yaha jo 1 st index p hoga uska parent toh -1 hoga toh hum 2 se chalayenge
    for (int i = 2; i <= n; i++) {
        result.push_back({{parent[i],i},key[i]});
    }
    return result;

}
