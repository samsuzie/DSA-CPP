class Solution {
public:
    void bfs(int &row,int &col , vector<vector<int>>&visited,vector<vector<char>>& grid){
        visited[row][col]=1;
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>>q;
        q.push({row,col});
        // int row = grid.size();
        // int col = grid[0].size();
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            // traverse in neighbor and mark them is it is a land
            for(int delrow = -1 ;delrow<=1;delrow++){
                for(int delcol = -1;delcol<=1;delcol++){
                    int nrow = row + delrow;
                    int ncol = col + delcol;
                    // just check that they are valid
                    if( (abs(delrow-delcol)==1) && nrow >=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol]=='1' && !visited[nrow][ncol]){
                        visited[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                }

            }
        }        
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m =  grid[0].size();
        // visited array
        vector<vector<int>>visited(n,vector<int>(m,0));
        int cnt =0;
        for(int row = 0;row<n;row++){
            for(int col =0;col<n;col++){
                if(!visited[row][col] && grid[row][col]=='1'){
                    bfs(row,col,visited,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
