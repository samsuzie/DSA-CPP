class Solution {
public:
    int getmin(vector<int>&bloomDay){
        int mini = INT_MAX;
        int n = bloomDay.size();
        for(int i =0;i<n;i++){
            mini = min(bloomDay[i],mini);
        }
        return mini;
    }
    int getmax(vector<int>&bloomDay){
        int maxi = INT_MIN;
        int n = bloomDay.size();
        for(int i =0;i<n;i++){
            maxi = max(maxi , bloomDay[i]);
        }
        return maxi;
    }
    bool possible(vector<int>&bloomDay , int  mid , int m , int k){
        int cnt =0;
        int n = bloomDay.size();
        int boquet = 0;
        for(int i =0;i<n;i++){
            if(bloomDay[i]<=mid){
                cnt ++;
            }
            else{
                boquet += cnt/k;
                cnt =0;
            }
        }
        boquet += cnt/k;
        if(boquet>= m){
            return true;
        }
        else{
            return false;
        }
    }
    int minDays(vector<int>& bloomDay, int m, int k) {
        long long val = m*1LL *k*1LL;
        if(val>bloomDay.size()){
            return -1;
        }
        int minimum = getmin(bloomDay);
        int maximum = getmax(bloomDay);
        int low = minimum ;
        int high = maximum;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(possible(bloomDay,mid,m,k)){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low ;
    }
};
