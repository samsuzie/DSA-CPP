void inorder(TreeNode *root , vector<int>&in){
    // base case
    if(root == NULL){
        return ;
    }
        inorder(root->left,in);
        in.push_back(root->data);
        inorder(root->right,in);
    
}

vector<int>mergeArray(vector<int>&a,vector<int>&b){
    vector<int>ans(a.size()+b.size());
    int i =0;
    int j =0;
    int k =0;
    while(i<a.size() && j<b.size()){
        if(a[i]<b[j]){
            ans[k++] = a[i];
            i++;
        }
        else{
            ans[k++] = b[j];
            j++;
        }
    }
    while(i<a.size()){
        ans[k++] = a[i];
        i++;
    }
    while(j<b.size()){
        ans[k++] = b[j];
        j++;
    }
    return ans;

}

vector<int> mergeBST(TreeNode *root1, TreeNode *root2) {
    // step1 :store inorder
    vector<int> bst1, bst2;
    inorder(root1, bst1);
    inorder(root2, bst2);
    return mergeArray(bst1, bst2);
}
