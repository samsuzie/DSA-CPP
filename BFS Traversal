#include<unordered_map>
#include<queue>
#include<list>
#include<set>
void prepareAdj(unordered_map<int, list<int>>&adjList,vector<vector<int>> &adj){
    for(int i =0;i<adj.size();i++){
        int u = adj[i][0];
        int v = adj[i][1];

        adjList[u].insert(v);
        adjList[v].insert(u);
    }
}

void bfs(unordered_map<int, set<int>>&adjList,unordered_map<int,bool>&visited,
 vector<int>&ans,int node){
     queue<int>q;
     q.push(node);
     visited[node] = 1;
     while(!q.empty()){
         int frontNode = q.front();
         q.pop();

        //  store front node into ans
        ans.push_back(frontNode);

        // traverse all neighbour of front Npde
        for(auto i:adjList[frontNode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=1;
            }
        }
     }
 }
vector<int> bfsTraversal(int n, vector<vector<int>> &adj){
    unordered_map<int, set<int>>adjList;
    vector<int>ans;
    unordered_map<int,bool>visited;

    prepareAdj(adjList,adj);
    printAdj(adjList);
    // traverse all componenets of a graph
    for(int i =0;i<n;i++){
        if(!visited[i]){
            bfs(adjList,visited,ans,i);
        }
    }
    return ans;
}
