#include<unordered_map>
#include<queue>
#include<list>


bool isCyclicBFS(int src,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj){
    // wo parent wala data structure
    unordered_map<int,int>parent;
    parent[src]=-1;
    visited[src]=1;
    queue<int>q;
    q.push(src);
    while(!q.empty()){
        int frontnode = q.front();
        q.pop();
        for(auto neighbor:adj[frontnode]){
            if(visited[neighbor]==true && neighbor != parent[frontnode]){
                return true;
            }
            else if(!visited[neighbor]){
                q.push(neighbor);
                visited[neighbor]=1;
                parent[neighbor]=frontnode;
            }
        }
    }
    return false;
}

bool isCyclicDFS(int node, int parent,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj){
    visited[node]=true;
    for(auto neighbor:adj[node]){
        if(!visited[neighbor]){
            bool cycleDeteced = isCyclicDFS(neighbor, node, visited, adj);
            if(cycleDeteced){
                return true;
            }
        }
        else if(neighbor !=parent){
            // return true;
            return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // we will first create adjacency list
    unordered_map<int,list<int>>adj;
    for(int i =0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // to handle disconnected components
    unordered_map<int,bool>visited;
    for(int i =0;i<n;i++){
        if(!visited[i]){
            bool ans = isCyclicDFS(i,-1,visited,adj);
            if(ans == 1){
                return "Yes";
            }
        }
    }
    return "No";
}
