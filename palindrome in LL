class Solution {
  private:
  Node* reverse(Node* head){
      Node*prev = NULL;
      Node*curr = head;
      while(curr!=NULL){
          Node*forward = curr->next;
          curr->next=prev;
          prev = curr;
          curr = forward;
      }
      return prev;
  }
  Node* getMid(Node* &head){
      Node* slow = head;
      Node* fast = head->next;
      while(slow!=NULL && fast!=NULL && fast->next!=NULL){
          fast = fast->next->next;
          slow = slow->next;
      }
      return slow;
  }
  public:
    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        // Your code here
        if(head==NULL||head->next==NULL){
            return true;
        }
        Node* middle = getMid(head);
        // reverse the half node
        Node* temp  = middle->next;
        middle->next = reverse(temp);
        // compare both the halves
        Node* head1 = head;
        Node* head2 = middle->next;
        while(head2!=NULL){
            if(head1 ->data != head2->data){
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        // step 4 repeat step 2;
        temp  = middle->next;
        middle->next = reverse(temp);
        
        
        return true;
    }
};
