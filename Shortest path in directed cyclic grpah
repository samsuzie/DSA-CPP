#include<unordered_map>
#include<queue>
#include<list>
vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// create adjacency list
	unordered_map<int,list<int>>adj;
	for(int i =0;i<m;i++){
		int u = edges[i].first;
		int v = edges[i].second;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	// create visited array ;
	unordered_map<int,bool>visited;
	queue<int>q;
	unordered_map<int,int>parent;
	visited[s]=1;
	parent[s]=-1;
	q.push(s);
	while(!q.empty()){
		int front = q.front();
		q.pop();
		for(auto neighbor:adj[front]){
			if(!visited[neighbor]){
				visited[neighbor]=1;
				q.push(neighbor);
				parent[neighbor]=front;
			}
		}
	}
	// prepare shortest path
	vector<int>ans;
	int currentNode = t;
	ans.push_back(t);
	while(currentNode != s){
		currentNode = parent[currentNode];
		ans.push_back(currentNode);
	}
	reverse(ans.begin(),ans.end());
	return ans;
}
