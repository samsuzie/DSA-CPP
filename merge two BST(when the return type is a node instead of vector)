void inorder(TreeNode *root , vector<int>&in){
    // base case
    if(root == NULL){
        inorder(root->left,in);
        in.push_back(root->data);
        inorder(root->right,in);
    }
}

vector<int>mergeArray(vector<int>&a,vector<int>&b){
    vector<int>ans(a.size()+b.size());
    int i =0;
    int j =0;
    int k =0;
    while(i<a.size() && j<b.size()){
        if(a[i]<b[j]){
            ans[k++] = a[i];
            i++;
        }
        else{
            ans[k++] = b[j];
            j++;
        }
    }
    while(i<a.size()){
        ans[k++] = a[i];
        i++;
    }
    while(j<b.size()){
        ans[k++] = b[j];
        j++;
    }
    return ans;

}
TreeNode* inorderToBst(int s , int e, vector<int>&inorderVal){
    // base case
    if(s>e){
        return NULL;
    }
    // find out mid
    int mid = (s+e)/2;
    TreeNode*root = new TreeNode(inorderVal[mid]);
    root->left = inorderToBst(s, mid-1,inorderVal);
    root->right = inorderToBst(mid+1,  e, inorderVal);
    return root;
}
vector<int> mergeBST(TreeNode *root1, TreeNode *root2) {
    // step1 :store inorder
    vector<int> bst1, bst2;
    inorder(root1, bst1);
    inorder(root2, bst2);

// step2:
    vector<int> merge = mergeArray(bst1, bst2);
    int s = 0;
    int e = merge.size() - 1;
    return inorderToBst(s, e, merge);
}
